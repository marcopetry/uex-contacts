/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as RegisterImport } from "./routes/register";
import { Route as LoginImport } from "./routes/login";
import { Route as ContactsIndexImport } from "./routes/contacts/index";
import { Route as ContactsCreateImport } from "./routes/contacts/create";
import { Route as ContactsIdImport } from "./routes/contacts/$id";

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const ContactsIndexRoute = ContactsIndexImport.update({
  id: "/contacts/",
  path: "/contacts/",
  getParentRoute: () => rootRoute,
} as any);

const ContactsCreateRoute = ContactsCreateImport.update({
  id: "/contacts/create",
  path: "/contacts/create",
  getParentRoute: () => rootRoute,
} as any);

const ContactsIdRoute = ContactsIdImport.update({
  id: "/contacts/$id",
  path: "/contacts/$id",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/register": {
      id: "/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
    "/contacts/$id": {
      id: "/contacts/$id";
      path: "/contacts/$id";
      fullPath: "/contacts/$id";
      preLoaderRoute: typeof ContactsIdImport;
      parentRoute: typeof rootRoute;
    };
    "/contacts/create": {
      id: "/contacts/create";
      path: "/contacts/create";
      fullPath: "/contacts/create";
      preLoaderRoute: typeof ContactsCreateImport;
      parentRoute: typeof rootRoute;
    };
    "/contacts/": {
      id: "/contacts/";
      path: "/contacts";
      fullPath: "/contacts";
      preLoaderRoute: typeof ContactsIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/login": typeof LoginRoute;
  "/register": typeof RegisterRoute;
  "/contacts/$id": typeof ContactsIdRoute;
  "/contacts/create": typeof ContactsCreateRoute;
  "/contacts": typeof ContactsIndexRoute;
}

export interface FileRoutesByTo {
  "/login": typeof LoginRoute;
  "/register": typeof RegisterRoute;
  "/contacts/$id": typeof ContactsIdRoute;
  "/contacts/create": typeof ContactsCreateRoute;
  "/contacts": typeof ContactsIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/login": typeof LoginRoute;
  "/register": typeof RegisterRoute;
  "/contacts/$id": typeof ContactsIdRoute;
  "/contacts/create": typeof ContactsCreateRoute;
  "/contacts/": typeof ContactsIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/login"
    | "/register"
    | "/contacts/$id"
    | "/contacts/create"
    | "/contacts";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/login"
    | "/register"
    | "/contacts/$id"
    | "/contacts/create"
    | "/contacts";
  id:
    | "__root__"
    | "/login"
    | "/register"
    | "/contacts/$id"
    | "/contacts/create"
    | "/contacts/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute;
  RegisterRoute: typeof RegisterRoute;
  ContactsIdRoute: typeof ContactsIdRoute;
  ContactsCreateRoute: typeof ContactsCreateRoute;
  ContactsIndexRoute: typeof ContactsIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ContactsIdRoute: ContactsIdRoute,
  ContactsCreateRoute: ContactsCreateRoute,
  ContactsIndexRoute: ContactsIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/login",
        "/register",
        "/contacts/$id",
        "/contacts/create",
        "/contacts/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/contacts/$id": {
      "filePath": "contacts/$id.tsx"
    },
    "/contacts/create": {
      "filePath": "contacts/create.tsx"
    },
    "/contacts/": {
      "filePath": "contacts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
